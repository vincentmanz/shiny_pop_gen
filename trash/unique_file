app.R
library(shiny)
library(shinythemes)
library(leaflet)
library(plotly)
library(tidyr)
library(shinydashboard)

source("ui_import_data.R")
source("ui_genetic_drift.R")

linebreaks <- function(n){HTML(strrep(br(), n))}

ui <- navbarPage(
  "GenoPop",
  theme = shinytheme("flatly"),
  tabPanel("Home", 
           h2("Welcome to GenoPop"), icon = icon("home"),
           HTML(paste("This interactive Shiny app serves as a resource for both novice participants in the Empirical Population Genetics training course and researchers seeking to analyze ALFP or RAPD data. The app features multiple tabs designed to facilitate data processing and enhance understanding of the calculations.",
                      "For more comprehensive insights and course details, please visit Thierry de Meuus' website:", "<a href='https://www.t-de-meeus.fr/EnseignMeeus.html' target='_blank'>https://www.t-de-meeus.fr/EnseignMeeus.html</a>", sep="<br/>")),
           linebreaks(10),
           HTML("If you have any suggestions or encounter bugs, please don't hesitate to contact Vincent Manzanilla through the GitHub page:<br/><a href='https://github.com/vincentmanz/shiny_pop_gen' target='_blank'>https://github.com/vincentmanz/shiny_pop_gen</a>")
  ),
  tabPanel("Data", generateImportDataUI(), icon = icon("cog", lib = "glyphicon")),
  tabPanel("Genetic drift", generateGeneticDriftUI(), icon = icon("cog", lib = "glyphicon")),
  tabPanel("LD", h2("Hierarchical tab"), icon = icon("cog", lib = "glyphicon")),
  tabPanel("Classic statistics", h2("Classic statistics tab"), icon = icon("cog", lib = "glyphicon")),
  tabPanel("Amplification problems", h2("Amplification problems tab"), icon = icon("cog", lib = "glyphicon")),
  tabPanel("Distances", h2("Distances tab"), icon = icon("cog", lib = "glyphicon"))
)

library(shiny)
library(plotly)
library(dplyr)
library(shinyalert)

source("server_import_data.R")
source("server_genetic_drift.R")


server <- function(input, output, session) {
  # Combine server functions from other source files
  server_import_data(input, output, session)
  server_genetic_drift(input, output, session)
}


shinyApp(ui = ui, server = server)
server_general_stats.R
server_general_stats <- function(input, output, session) {
  
  # Define the reactive expression to hold the data frame
  df_reactive <- reactiveVal(default_df)
  
  # Update the select input choices for "Population" and "Individuals"
  observe({
    req(df_reactive())
    df <- df_reactive()
    
    updateSelectInput(session, 'var1', choices = c("select" = "", colnames(df)))
    updateSelectInput(session, 'var2', choices = c("select" = "", colnames(df)))
  })
  
  # Observer for the 'Run' button for variables
  observeEvent(input$run_var, {
    req(df_reactive(), input$var1, input$var2)
    df <- df_reactive()
    
    pop_col <- input$var1
    ind_col <- input$var2
    
    if (!is.null(pop_col) && !is.null(ind_col)) {
      counts <- df %>%
        group_by_at(vars({{ pop_col }}, {{ ind_col }})) %>%
        summarize(count = n())
      
      output$count_table <- renderTable({
        counts
      })
    }
  })
  
  # Observer for the 'Run' button for column ranges
  observeEvent(input$run_col_ranges, {
    req(df_reactive(), input$col_ranges)
    df <- df_reactive()
    
    col_ranges <- unlist(strsplit(input$col_ranges, ","))
    
    missing_percentages <- numeric(length(col_ranges))
    missing_counts <- integer(length(col_ranges))
    
    for (i in seq_along(col_ranges)) {
      range_str <- trimws(col_ranges[i])
      if (grepl("-", range_str)) {
        range_parts <- as.numeric(strsplit(range_str, "-")[[1]])
        if (length(range_parts) == 2 && all(!is.na(range_parts))) {
          start_col <- range_parts[1]
          end_col <- range_parts[2]
          
          num_zeros_nas <- sum(df[start_col:end_col] == 0 | is.na(df[start_col:end_col]))
          total_cells <- length(df[start_col:end_col])
          missing_percentage <- (num_zeros_nas / total_cells) * 100
          
          missing_percentages[i] <- missing_percentage
          missing_counts[i] <- num_zeros_nas
        }
      } else if (grepl(":", range_str)) {
        range_parts <- as.numeric(strsplit(range_str, ":")[[1]])
        if (length(range_parts) == 2 && all(!is.na(range_parts))) {
          start_col <- range_parts[1]
          end_col <- range_parts[2]
          
          num_zeros_nas <- sum(df[start_col:end_col] == 0 | is.na(df[start_col:end_col]))
          total_cells <- length(df[start_col:end_col])
          missing_percentage <- (num_zeros_nas / total_cells) * 100
          
          missing_percentages[i] <- missing_percentage
          missing_counts[i] <- num_zeros_nas
        }
      }
    }
    
    # Create a data frame for the missing info
    missing_info_df <- data.frame(
      Column_Range = col_ranges,
      Missing_Count = missing_counts,
      Missing_Percentage = missing_percentages
    )
    
    # Render the missing info as HTML code
    output$missing_info <- renderUI({
      HTML(
        paste(
          "<table class='table shiny-table table-spacing-s' style='width:auto;'>",
          "<thead> <tr>",
          "<th style='text-align: left;'> Column_Range </th>",
          "<th style='text-align: right;'> Missing_Count </th>",
          "<th style='text-align: right;'> Missing_Percentage </th>",
          "</tr> </thead>",
          "<tbody>",
          apply(missing_info_df, 1, function(row) {
            paste("<tr>",
                  "<td>", row[1], "</td>",
                  "<td align='right'>", row[2], "</td>",
                  "<td align='right'>", row[3], "</td>",
                  "</tr>", sep = "")
          }),
          "</tbody>",
          "</table>"
        )
      )
    })
    
  })
  
  # outputOptions(output, "missing_info", suspendWhenHidden = FALSE)  # Keep output active
  
}
server_genetic_drift.R
server_genetic_drift <- function(input, output, session) {
  
  ##### Genetic drift ####
  
  simulation <- eventReactive(input$go, {
    ## generate allele frequencies
    ##
    N <- round(input$N)
    n_gen <- 20 * N
    two_n <- 2 * N
    
    df <- data.frame(
      replicate(n = input$n_pops, expr = {
        sims <- rep(NA, n_gen)
        sims[1] <- input$p
        i <- 1
        while (sims[i] > 0 & sims[i] < 1) {
          i <- i + 1
          sims[i] <- rbinom(n = 1, size = two_n, prob = sims[i-1]) /
            two_n
        }
        return(sims)
      })
    ) %>% 
      filter_all(any_vars(!is.na(.))) %>%
      mutate(t = 0:(nrow(.) - 1)) %>% 
      gather(pop, p, -t) 
    
    df <- left_join(df, df %>%
                      filter(!is.na(p)) %>%
                      group_by(pop) %>%
                      summarize(p_final = last(p)), by = "pop"
    ) %>%
      mutate(p = ifelse(is.na(p), p_final, p))
    
    ## construct data frame for plotly
    ##
    n_gen <- max(df$t)
    d <- crossing(
      df,
      frame = 0:n_gen
    ) %>%
      filter(frame >= t)
    
    d
    
  })
  
  output$allele_frequency_plot <- renderPlotly({
    
    d <- simulation()
    n_gen <- max(d$t)
    
    ## plot it
    ##
    if (n_gen > 100) {
      x <- round(seq(0, n_gen, length.out = 100))
    } else {
      x <- 0:n_gen
    }
    
    gp <- ggplot(filter(d, t %in% x), aes(x = t, y = p, color = pop, frame = frame)) +
      geom_line() +
      scale_y_continuous(limits = c(0, 1)) +
      scale_color_brewer(palette = "Set1") + 
      xlab("Time (generations)") +
      ylab("Allele Frequency, p") +
      theme_bw() +
      theme(legend.position = "none")
    
    p_plot <- gp %>%
      ggplotly() %>%
      animation_opts(
        frame = 1000 / n_gen,
        transition = 0,
        redraw = FALSE
      ) %>%
      animation_slider(
        hide = TRUE
      )
  })
  
  output$summary_table <- renderTable({
    d <- simulation()
    d %>%
      filter(frame == max(frame)) %>%
      group_by(pop) %>%
      summarize(
        `Initial allele frequency` = first(p),
        `Final allele frequency` = last(p),
        `Time to fixation` = min(which(p %in% c(0, 1)))
      ) %>%
      rename(Population = pop) %>%
      mutate(N = input$N, Population = 1:nrow(.)) %>%
      select(Population, N, `Initial allele frequency`, `Final allele frequency`, `Time to fixation`)
  })
  
  output$copy1 <- renderPrint({
    
    simulation() %>%
      filter(frame == max(frame)) %>%
      group_by(pop) %>%
      summarize(p = last(p)) %>% 
      pull(p) %>%
      str_c(collapse = ",") %>%
      cat()
    
  })
  
  output$copy2 <- renderPrint({
    
    simulation() %>%
      filter(frame == max(frame)) %>%
      group_by(pop) %>%
      summarize(t = min(which(p %in% c(0, 1)))) %>% 
      pull(t) %>%
      str_c(collapse = ",") %>%
      cat()
    
  })
  
}server_import_data.R
# server_import_data.R

default_df <- readr::read_tsv("https://www.t-de-meeus.fr/Enseign/BoophilusAdultsDataCattle.txt")

server_import_data <- function(input, output, session) {
  
  # Define the reactive expression to hold the data frame
  df <- reactiveVal(default_df)
  
  # Load default data when the button is clicked
  observeEvent(input$load_default_data, {
    df(read.csv("https://www.t-de-meeus.fr/Enseign/BoophilusAdultsDataCattle.txt",
                header = input$header,
                sep = input$sep,
                quote = input$quote))
  })
  
  # Handle file upload
  observeEvent(input$file1, {
    req(input$file1)
    df(read.csv(input$file1$datapath,
                header = input$header,
                sep = input$sep,
                quote = input$quote))
  })
  
  # Handle filtering of data
  observeEvent(input$run_filter, {
    req(df())
    
    # Excluding columns
    excluded_cols <- unlist(strsplit(input$exclude_cols, ","))
    
    if (!is.null(excluded_cols) && length(excluded_cols) > 0 && any(excluded_cols != "")) {
      df_filtered <- df() %>%
        select(-any_of(excluded_cols))
      df(df_filtered)
    }
    
    # Excluding rows
    excluded_rows <- unlist(strsplit(input$exclude_rows, "[, ]+"))
    excluded_rows <- as.integer(excluded_rows[excluded_rows != ""])
    
    if (length(excluded_rows) > 0) {
      df_filtered <- df() %>%
        slice(-excluded_rows)
      df(df_filtered)
    }
  })
  
  # Display the first 15 rows of the dataframe
  output$contents <- renderTable({
    req(df())
    head(df(), n = 15)
  })
  
  # Update the select input choices
  observe({
    req(df())
    df_local <- df()
    updateSelectInput(session, 'pop_data', choices = c("select" = "", colnames(df_local)))
    updateSelectInput(session, 'latitude_data', choices = c("select" = "", colnames(df_local)))
    updateSelectInput(session, 'longitude_data', choices = c("select" = "", colnames(df_local)))
  })
  
  # Create a reactiveValues object to store the results
  result_data <- reactiveValues(
    number_pop = 0,
    number_indv = 0,
    number_marker = 0,
    number_missing = 0,
    number_missing_per = 0
  )
  
  # Create the table and the map
  observeEvent(input$run_assign, {
    req(input$pop_data, input$latitude_data, input$longitude_data, input$col_ranges_data, df())
    df_local <- df()
    
    # Check if Population has data
    if (input$pop_data == "") {
      shinyalert(title = "Error", text = "You need to select populations.", type = "error")
      return()  # Exit the event handler
    } 
    
    # Check if Marker Range has data
    if (input$col_ranges_data == "") {
      shinyalert(title = "Error", text = "You need to select a marker range.", type = "error")
      return()  # Exit the event handler
    }

    # Check if latitude is not numeric
    if (is.numeric(input$latitude_data)) {
      shinyalert(title = "Error", text = "Latitude should be numerical, select another column or check your data.", type = "error")
      return()  # Exit the event handler
    }
    if (is.numeric(input$longitude_data)) {
      shinyalert(title = "Error", text = "Longitude should be numerical, select another column or check your data.", type = "error")
      return()  # Exit the event handler
    }
    # Check if the range is valid
    range_values <- unlist(strsplit(input$col_ranges_data, "[:-]"))
    range_values <- as.numeric(range_values)
    
    if (any(is.na(range_values)) || range_values[1] < 1 || range_values[2] > length(colnames(df_local))) {
      shinyalert(title = "Error", text = "Try again, your range is out of bounds.", type = "error")
      return()  # Exit the event handler
    }
    
    # Convert marker range to numeric
    range_data <- input$col_ranges_data
    range_values <- unlist(strsplit(range_data, "[:-]"))
    range_values <- as.numeric(range_values)
    
    # Extract the range of column headers
    column_range_name <- colnames(df_local)[range_values[1]:range_values[2]]
    
    # Filter columns to keep in the new data frame
    cols_to_keep <- c(input$pop_data, input$latitude_data, input$longitude_data, column_range_name)
    new_df <- df_local[, cols_to_keep]
    
    # Rename columns
    col_names <- colnames(new_df)
    col_names[2] <- "Latitude"
    col_names[3] <- "Longitude"
    col_names[4:(3 + length(column_range_name))] <- column_range_name
    colnames(new_df) <- col_names
    
    # Convert selected columns to numeric
    cols_to_convert <- col_names[which(col_names %in% c("Latitude", "Longitude", col_names[4:(3 + length(range_values))]))]
    new_df[, cols_to_convert] <- apply(new_df[, cols_to_convert], 2, as.numeric)
    
    # Update df_assigned
    df(new_df)
    
    ### General stats###
    range_cols <- colnames(new_df)[4:(3 + length(range_values))]
    
    # Calculate the number of rows and assign it to a variable 'number_indv'
    number_indv <- nrow(new_df)
    
    # Count missing data in the range col_ranges_data
    number_missing <- sum(
      is.na(new_df[, 4:(3 + length(range_values))]) |
        new_df[, 4:(3 + length(range_values))] == 0 |
        tolower(new_df[, 4:(3 + length(range_values))]) == "na" |
        tolower(new_df[, 4:(3 + length(range_values))]) == 000 |
        tolower(new_df[, 4:(3 + length(range_values))]) == ""
    )
    
    number_missing_per <- (number_missing / length(range_cols)) * 100
    
    # Count the number of unique values in pop_data
    number_pop <- length(unique(new_df[[input$pop_data]]))

    # Count the number of selected columns in col_ranges_data
    number_marker <- length(range_values)

    # Print the results
    print(paste("Number of Population:", number_pop))
    print(paste("Number of individuals:", number_indv))
    print(paste("Number of marker:", number_marker))
    print(paste("Number of missing data:", number_missing))
    print(paste("Percentage of missing data:", number_missing_per))
    
    # Create a data frame for the missing info
    results_table <- data.frame(
      "Number of Population:" = number_pop,
      "Number of individuals:" = number_indv,
      "Number of marker:" = number_marker,
      "Number of missing data:" = number_missing,
      "Percentage of missing data:" = number_missing_per
    )
    
    # Update result_data with the calculated values
    result_data$number_pop <- number_pop
    result_data$number_indv <- number_indv
    result_data$number_marker <- number_marker
    result_data$number_missing <- number_missing
    result_data$number_missing_per <- number_missing_per
    
    # Render the results table using renderUI
    output$results_table_ui <- renderUI({
      tableOutput("results_table")
    })
    
    # Render the actual results table
    output$results_table <- renderTable({
      results_table
    })
    
    
    ##### MAP ####
    
    # Create the populationsLL data frame
    populationsLL <- new_df[,1:3]
    print(populationsLL)
    
    # Group by Locality, Latitude, and Longitude, and calculate Population Size
    populationsLL_grouped <- populationsLL %>%
      group_by_all()%>%count()
    colnames(populationsLL_grouped) <- c('Population', 'Longitude', 'Latitude', 'Population size')
    
    # Render the populationsLL_uniq data frame as a table
    output$populationsLL_uniq_table <- renderTable({
      req(input$run_map)  # Show the table after clicking "Run Map" button
      populationsLL_grouped
    })
    # Render the map
    output$map <- renderLeaflet({
      leaflet(populationsLL_grouped) %>%
        addTiles() %>%
        addCircles(lng = populationsLL_grouped$Latitude, lat = populationsLL_grouped$Longitude, 
                   popup=paste("Location:", populationsLL_grouped$Population, "<br>","Population size:", populationsLL_grouped$`Population size`), 
                   radius = populationsLL_grouped$`Population size` * 50,
                   stroke = FALSE, fillOpacity = 0.5)
    })
  })
  
  
}
ui_genetic_drift.R
###########################Genetic drift tab##################################
# Define the UI for the "Genetic Drift" tab

## initial values, adjustable via sliders
initial_p <- 0.5
initial_N <- 10
initial_n_pops <- 5

generateGeneticDriftUI <- function() {
  fluidPage(
    titlePanel("Allele frequency changes with genetic drift"),
    sidebarLayout(
      sidebarPanel(
        numericInput("p", "Initial frequency of A", min = 0.0, max = 1.0, value = initial_p, step = 0.01),
        helpText("Frequency must be between 0 and 1"),
        numericInput("N",
                     "Population size",
                     min = 1,
                     max = 20,
                     value = initial_N),
        helpText("N must be between 1 and 100. The plot will take several seconds to load when N is high."),
        sliderInput("n_pops",
                    "Number of populations",
                    min = 1,
                    max = 100,
                    value = initial_n_pops),
        actionButton("go", "Simulate Genetic Drift!", icon("refresh")),
        helpText("When you click the button above, the figure to the right will update with new simulations using the parameters you entered above."),
      ),
      
      ## Show a plot of the simulated change in allele frequencies
      
      mainPanel(
        # p("Notes explaining the principles of genetic drift are available at:",
        #   uiOutput("darwin")),
        p("The inputs to the left allow you to select a different starting initial allele frequency, diploid population size (so the number of gametes is 2N, and number of populations. Each line represents the history of allele frequency change in one population. All populations begin with an identical allele frequency. Each time you change one of the inputs, you'll get a new set of simulation results after you hit the \"Simulate Genetic Drift!\" button. If you hit \"Play\" without changing the input, you'll get a duplicate of the plot you just saw."),
        plotlyOutput("allele_frequency_plot"),
        hr(),
        p("This Shiny app was adapted from Kent Holsinger's source code:")
      )
    )
  )
}

ui_import_data.R
# ui_import_data.R

generateImportDataUI <- function() {
  fluidPage(
    # Box title
    titlePanel("Import Data"),
    
    fluidRow(
      column(4,
             # Sidebar panel for uploading files
             sidebarPanel(
               width = 12,
               fileInput("file1", "Choose CSV File",
                         multiple = TRUE,
                         accept = c("text/csv",
                                    "text/comma-separated-values,text/plain",
                                    ".csv")),
               
               tags$hr(),
               
               checkboxInput("header", "Header", TRUE),
               
               radioButtons("sep", "Separator",
                            choices = c(Comma = ",",
                                        Semicolon = ";",
                                        Tab = "\t"),
                            selected = "\t"),
               
               radioButtons("quote", "Quote",
                            choices = c(None = "",
                                        "Double Quote" = '"',
                                        "Single Quote" = "'"),
                            selected = ''),
               
               tags$hr(),
               
               actionButton("load_default_data", "Load Default Data")
             )
      ),
      column(4,
             # Sidebar panel for filtering data
             sidebarPanel(
               width = 12,
               h3("Filtering data"),
               class = "fixed-filtering-data",
               
               textInput("exclude_cols", "Exclude columns (comma-separated)", ""),
               
               textInput("exclude_rows", "Exclude rows (comma-separated or range)", ""),
               
               actionButton("run_filter", "Run")
             )
      ),
      column(4,
             # Sidebar panel for assigning data
             sidebarPanel(
               width = 12,
               h3("Assign data"),
               class = "fixed-filtering-data",
               position = "right",
               
               selectInput("pop_data", "Population", choices = NULL),
               
               selectInput("latitude_data", "Latitude", choices = NULL),
               
               selectInput("longitude_data", "Longitude", choices = NULL),
               
               textInput("col_ranges_data", "Select Genotypes (e.g., 1-4, 5:10)"),
               
               actionButton("run_assign", "Run Assign Data")
             )
      )
    ),
    fluidRow(
      column(12,
             # Main panel for displaying outputs
             mainPanel(
               tableOutput("contents"),
               tableOutput("results_table"),
               tableOutput("populationsLL_uniq_table"),
               leafletOutput("map") 
             )
      )
    )
  )
}
